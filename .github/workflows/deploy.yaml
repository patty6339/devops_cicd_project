name: CI/CD with Terraform
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE}}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1

jobs:
  deploys-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan 
          -var="region=us-east-1" -var="public_key=$PUBLIC_SSH_KEY" -var="private_key=$PRIVATE_SSH_KEY" -var="key_name=iamadmin-keypair-general-useast1" -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set Server Public IP
        id: set-ip
        run: echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform
  deploys-app:
    runs-on: ubuntu-latest
    needs: deploys-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set ip env variable
        run: echo "SERVER_PUBLIC_IP=${{ needs.deploys-infra.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR repository if it doesn't exist
        env:
          AWS_DEFAULT_REGION: us-east-1
          REPOSITORY: first-node-app
        run: |
          aws ecr describe-repositories --repository-names $REPOSITORY || aws ecr create-repository --repository-name $REPOSITORY
      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: first-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        run: |- 
         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy docker image to EC2
        uses: appleboy/ssh-action@master
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: first-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          envs: REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION
          script: |
            sudo apt update
            sudo apt install docker.io -y
            # Install AWS CLI v2 instead of using apt
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip -y
            unzip awscliv2.zip
            sudo ./aws/install
            # Configure AWS credentials and authenticate with ECR
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$AWS_DEFAULT_REGION"
            
            # Get ECR login password and login to Docker
            ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region "$AWS_DEFAULT_REGION")
            echo "$ECR_LOGIN_PASSWORD" | sudo docker login --username AWS --password-stdin "$REGISTRY"
            # Handle container management with proper error checking
            sudo docker stop myappcontainer || echo "Container not running, proceeding..."
            sudo docker rm myappcontainer || echo "Container not found, proceeding..."
            # Pull and run the container with explicit error handling
            echo "Pulling image from $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker pull "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
            echo "Starting container..."
            sudo docker run -d --name myappcontainer -p 80:8080 "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
            echo "Container started successfully"
         

  
